# Задача 1 Даны значения величины заработной платы заемщиков банка (zp) и значения их
# поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].

# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с
# помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и
# среднеквадратичных отклонений двух признаков,
# а затем с использованием функций из библиотек numpy и pandas.

import numpy as np
import matplotlib.pyplot as plt
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110],)
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
zp_mean = zp.mean()
ks_mean = ks.mean()
cov = ((zp - zp_mean)*(ks-ks_mean)).sum()/(len(ks)-1)
print(cov, zp.var(ddof = 1), ks.var(ddof = 1) )
print(np.cov(zp, ks, ddof = 1))
plt.scatter(zp, ks)
plt.show()
print(np.corrcoef(zp, ks))


# Задача 2 Измерены значения IQ выборки студентов,
# обучающихся в местных технических вузах:
# 131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
# Известно, что в генеральной совокупности IQ распределен нормально.
# Найдите доверительный интервал для математического ожидания с надежностью 0.95.

#дисперсия не известна, используем t критерий
from scipy import stats
iq_students = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
iq_mean = iq_students.mean()
alpha = 0.05
n = len(iq_students)
sigma = iq_students.std()
print(iq_mean, n, sigma)
t1 = stats.t.ppf(alpha/2, df = n-1)
t2 = stats.t.ppf(1-alpha/2, df = n-1)
print(t1, t2)
print(f'Доверительный интервал для математического ожидания с надежностью 0.95 - > {iq_mean+t1*sigma/np.sqrt(n), iq_mean+t2*sigma/np.sqrt(n)}')



# Задача 3 Известно, что рост футболистов в сборной распределен нормально
# с дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки равен 27,
# среднее выборочное составляет 174.2. Найдите доверительный интервал для
# математического
# ожидания с надежностью 0.95.]

#есть дисперсия используем z критерий

n = 27
mu = 174.2
sigma = np.sqrt(25)
alpha = 0.05
t1 = stats.norm.ppf(alpha/2)
t2 = stats.norm.ppf(1-alpha/2)
print(f'Доверительный интервал для математического ожидания с надежностью 0.95 - > {mu+t1*sigma/np.sqrt(n), mu+t2*sigma/np.sqrt(n)}')

