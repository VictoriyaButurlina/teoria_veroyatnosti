# Задача 1. Известно, что генеральная совокупность распределена нормально
# со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания a с надежностью
# 0.95,
# если выборочная средняя M = 80, а объем выборки n = 256.

left=80-1.96*16/256**(1/2)
right=80+1.96*16/256**(1/2)
print(f'Доверительный интервал для оценки мат. ожидания с надежностью 95%: [{left};{right}].')
# Задача 2. В результате 10 независимых измерений некоторой величины X, выполненных с
# одинаковой точностью,
# получены опытные данные:
# 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону распределения
# вероятностей,
# оценить истинное значение величины X при помощи доверительного интервала,
# покрывающего это
# значение с доверительной вероятностью 0,95.

#используем t критерий, потому, что нет данных о мат ожидании генеральной совокупности, и о СКО для ген.сов-ти
import numpy as np
import scipy.stats as stats

x = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
x_mean = np.mean(x) #мат ожидание
x_v = np.var(x, ddof = 1) #дисперсия
n_x = len(x) #длина массива = количество
#Табличное значение t-критерия для 95%-го доверительного интервала данной выборки:  2.262

alpha = 0.05
t = stats.t.ppf(1-alpha/2, df = n_x-1)

left = x_mean-t*((x_v/n_x)**0.5)
right = x_mean+t*((x_v/n_x)**0.5)
print(f'{left:.3f}, {right:.3f}')
# Задача 3. Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170
# Рост матерей 178, 165, 165, 173, 168, 155, 160, 164, 178, 175

# Используя эти данные построить 95% доверительный интервал для разности среднего
# роста родителей и детей.
x = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])
y = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
n_x = len(x)
n_y = len(y)
x_v = np.var(x, ddof = 1)
y_v = np.var(y, ddof = 1)
d = (x_v+y_v)/2
s_delta=((x_v/n_x+y_v/n_y)**0.5)
alpha = 0.05
t1 = stats.t.ppf(alpha/2, df = 2*(n_x-1)) #критическое значение. Критерий распределения Стьюдента. Число степеней свободы df = 2*(n_x-1)
t2 = stats.t.ppf(1-alpha/2, df = 2*(n_x-1))

left = x.mean() - y.mean() + t1*s_delta
right = x.mean() - y.mean() + t2*s_delta
print(f'{left:.3f}, {right:.3f}')
